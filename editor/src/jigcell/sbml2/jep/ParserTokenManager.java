/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package jigcell.sbml2.jep;

public class ParserTokenManager implements ParserConstants {
   final static long jjbitVec0 [] = {0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL};
   final static long jjbitVec2 [] = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};
   final static long jjbitVec3 [] = {0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL};
   final static int jjnextStates [] = {13, 14, 15, 20, 21, 7, 9, 10, 11, 3, 4, 18, 19, 22, 23,};
   public final static String jjstrLiteralImages [] = {
      "", null, null, null, null, null, null, null, null, "\134", "\76", "\74", "\75", "\74\75", "\76\75", "\41\75", "\101\116\104", "\117\122",
      "\130\117\122", "\116\117\124", "\53", "\55", "\52", "\57", "\136", "\151\146", "\145\154\163\145\151\146", "\145\154\163\145",
      "\164\150\145\156", "\164\162\165\145", "\146\141\154\163\145", null, null, null, null, "\50", "\51", "\54",
   };
   public final static String lexStateNames [] = {"DEFAULT",};
   final static long jjtoToken [] = {0x38fffffea1L,};
   final static long jjtoSkip [] = {0x1eL,};
   public java.io.PrintStream debugStream = System.out;
   protected char curChar;
   boolean jjbeenHere [] = new boolean [1];
   int jjemptyColNo [] = new int [1];
   int jjemptyLineNo [] = new int [1];
   int curLexState = 0;
   int defaultLexState = 0;
   int jjimageLen;
   int jjmatchedKind;
   int jjmatchedPos;
   int jjnewStateCnt;
   int jjround;
   int lengthOfMatch;
   StringBuffer image;
   private final int jjrounds [] = new int [24];
   private final int jjstateSet [] = new int [48];
   private JavaCharStream input_stream;

   private final static boolean jjCanMove_0 (int hiByte, int i1, int i2, long l1, long l2) {
      switch (hiByte) {
         case 0 :
            return ((jjbitVec2 [i2] & l2) != 0L);
         case 255 :
            return ((jjbitVec3 [i2] & l2) != 0L);
         default :
            if ((jjbitVec0 [i1] & l1) != 0L)
               return true;
            return false;
      }
   }

   public ParserTokenManager (JavaCharStream stream) {
      if (JavaCharStream.staticFlag)
         throw new Error ("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
      input_stream = stream;
   }

   public ParserTokenManager (JavaCharStream stream, int lexState) {
      this (stream);
      SwitchTo (lexState);
   }

   public void ReInit (JavaCharStream stream) {
      jjmatchedPos = jjnewStateCnt = 0;
      curLexState = defaultLexState;
      input_stream = stream;
      ReInitRounds ();
   }

   public void ReInit (JavaCharStream stream, int lexState) {
      ReInit (stream);
      SwitchTo (lexState);
   }

   public void SwitchTo (int lexState) {
      if (lexState >= 1 || lexState < 0)
         throw new TokenMgrError ("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
            TokenMgrError.INVALID_LEXICAL_STATE);
      else
         curLexState = lexState;
   }

   public final Token getNextToken () {
      int kind;
      Token specialToken = null;
      Token matchedToken;
      int curPos = 0;

EOFLoop:
      for (; ; ) {
         try {
            curChar = input_stream.BeginToken ();
         } catch (java.io.IOException e) {
            jjmatchedKind = 0;
            matchedToken = jjFillToken ();
            return matchedToken;
         }
         image = null;
         jjimageLen = 0;

         try {
            input_stream.backup (0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken ();
         } catch (java.io.IOException e1) {
            continue EOFLoop;
         }
         jjmatchedKind = 31;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_0 ();
         if (jjmatchedKind != 0x7fffffff) {
            if (jjmatchedPos + 1 < curPos)
               input_stream.backup (curPos - jjmatchedPos - 1);
            if ((jjtoToken [jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
               matchedToken = jjFillToken ();
               TokenLexicalActions (matchedToken);
               return matchedToken;
            } else
               continue EOFLoop;
         }
         int error_line = input_stream.getEndLine ();
         int error_column = input_stream.getEndColumn ();
         String error_after = null;
         boolean EOFSeen = false;
         try {
            input_stream.readChar ();
            input_stream.backup (1);
         } catch (java.io.IOException e1) {
            EOFSeen = true;
            error_after = curPos <= 1 ? "" : input_stream.GetImage ();
            if (curChar == '\n' || curChar == '\r') {
               error_line++;
               error_column = 0;
            } else
               error_column++;
         }
         if (!EOFSeen) {
            input_stream.backup (1);
            error_after = curPos <= 1 ? "" : input_stream.GetImage ();
         }
         throw new TokenMgrError (EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
      }
   }

   public void setDebugStream (java.io.PrintStream ds) {
      debugStream = ds;
   }

   final void TokenLexicalActions (Token matchedToken) {
      switch (jjmatchedKind) {
         case 0 :
            break;
         case 5 :
            break;
         case 7 :
            break;
         case 9 :
            break;
         case 10 :
            break;
         case 11 :
            break;
         case 12 :
            break;
         case 13 :
            break;
         case 14 :
            break;
         case 15 :
            break;
         case 16 :
            break;
         case 17 :
            break;
         case 18 :
            break;
         case 19 :
            break;
         case 20 :
            break;
         case 21 :
            break;
         case 22 :
            break;
         case 23 :
            break;
         case 24 :
            break;
         case 25 :
            break;
         case 26 :
            break;
         case 27 :
            break;
         case 28 :
            break;
         case 29 :
            break;
         case 30 :
            break;
         case 31 :
            if (jjmatchedPos == -1) {
               if (jjbeenHere [0] && jjemptyLineNo [0] == input_stream.getBeginLine () && jjemptyColNo [0] == input_stream.getBeginColumn ())
                  throw new TokenMgrError (("Error: Bailing out of infinite loop caused by repeated empty string matches at line " +
                     input_stream.getBeginLine () + ", column " + input_stream.getBeginColumn () + "."), TokenMgrError.LOOP_DETECTED);
               jjemptyLineNo [0] = input_stream.getBeginLine ();
               jjemptyColNo [0] = input_stream.getBeginColumn ();
               jjbeenHere [0] = true;
            }
            break;
         case 35 :
            break;
         case 36 :
            break;
         case 37 :
            break;
         default :
            break;
      }
   }

   private final void ReInitRounds () {
      int i;
      jjround = 0x80000001;
      for (i = 24; i-- > 0; )
         jjrounds [i] = 0x80000000;
   }

   private final void jjAddStates (int start, int end) {
      do
         jjstateSet [jjnewStateCnt++] = jjnextStates [start];
      while (start++ != end);
   }

   private final void jjCheckNAdd (int state) {
      if (jjrounds [state] != jjround) {
         jjstateSet [jjnewStateCnt++] = state;
         jjrounds [state] = jjround;
      }
   }

   private final void jjCheckNAddStates (int start, int end) {
      do
         jjCheckNAdd (jjnextStates [start]);
      while (start++ != end);
   }

   private final void jjCheckNAddStates (int start) {
      jjCheckNAdd (jjnextStates [start]);
      jjCheckNAdd (jjnextStates [start + 1]);
   }

   private final void jjCheckNAddTwoStates (int state1, int state2) {
      jjCheckNAdd (state1);
      jjCheckNAdd (state2);
   }

   private final Token jjFillToken () {
      Token t = Token.newToken (jjmatchedKind);
      t.kind = jjmatchedKind;
      if (jjmatchedPos < 0) {
         t.image = "";
         t.beginLine = t.endLine = input_stream.getBeginLine ();
         t.beginColumn = t.endColumn = input_stream.getBeginColumn ();
      } else {
         String im = jjstrLiteralImages [jjmatchedKind];
         t.image = (im == null) ? input_stream.GetImage () : im;
         t.beginLine = input_stream.getBeginLine ();
         t.beginColumn = input_stream.getBeginColumn ();
         t.endLine = input_stream.getEndLine ();
         t.endColumn = input_stream.getEndColumn ();
      }
      return t;
   }

   private final int jjMoveNfa_0 (int startState, int curPos) {
      int nextStates [];
      int startsAt = 0;
      jjnewStateCnt = 24;
      int i = 1;
      jjstateSet [0] = startState;
      int j;
      int kind = 0x7fffffff;
      for (; ; ) {
         if (++jjround == 0x7fffffff)
            ReInitRounds ();
         if (curChar < 64) {
            long l = 1L << curChar;
MatchLoop:
            do {
               switch (jjstateSet [--i]) {
                  case 7 :
                     if ((0x7000bf0000000000L & l) != 0L) {
                        if (kind > 31)
                           kind = 31;
                        jjCheckNAddTwoStates (5, 6);
                     } else if (curChar == 33)
                        jjCheckNAdd (8);
                     if (curChar == 62)
                        jjCheckNAdd (8);
                     else if (curChar == 60)
                        jjCheckNAdd (8);
                     break;
                  case 0 :
                     if ((0x8fff40fe00000000L & l) != 0L) {
                        if (kind > 31)
                           kind = 31;
                        jjCheckNAddTwoStates (5, 6);
                     }
                     if ((0x3ff000000000000L & l) != 0L) {
                        if (kind > 5)
                           kind = 5;
                        jjCheckNAddStates (0, 4);
                     } else if (curChar == 46)
                        jjCheckNAdd (1);
                     break;
                  case 24 :
                  case 5 :
                     if ((0x8fff40fe00000000L & l) == 0L)
                        break;
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates (5, 6);
                     break;
                  case 1 :
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates (1, 2);
                     break;
                  case 3 :
                     if ((0x280000000000L & l) != 0L)
                        jjCheckNAdd (4);
                     break;
                  case 4 :
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd (4);
                     break;
                  case 8 :
                     if (curChar != 61)
                        break;
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates (5, 6);
                     break;
                  case 9 :
                     if (curChar == 60)
                        jjCheckNAdd (8);
                     break;
                  case 10 :
                     if (curChar == 62)
                        jjCheckNAdd (8);
                     break;
                  case 11 :
                     if (curChar == 33)
                        jjCheckNAdd (8);
                     break;
                  case 12 :
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates (0, 4);
                     break;
                  case 13 :
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd (13);
                     break;
                  case 14 :
                     if ((0x3ff000000000000L & l) != 0L)
                        jjCheckNAddTwoStates (14, 15);
                     break;
                  case 15 :
                     if (curChar != 46)
                        break;
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates (16, 17);
                     break;
                  case 16 :
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddTwoStates (16, 17);
                     break;
                  case 18 :
                     if ((0x280000000000L & l) != 0L)
                        jjCheckNAdd (19);
                     break;
                  case 19 :
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd (19);
                     break;
                  case 20 :
                     if ((0x3ff000000000000L & l) != 0L)
                        jjCheckNAddTwoStates (20, 21);
                     break;
                  case 22 :
                     if ((0x280000000000L & l) != 0L)
                        jjCheckNAdd (23);
                     break;
                  case 23 :
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd (23);
                     break;
                  default :
                     break;
               }
            } while (i != startsAt);
         } else if (curChar < 128) {
            long l = 1L << (curChar & 077);
MatchLoop:
            do {
               switch (jjstateSet [--i]) {
                  case 7 :
                     if ((0x50000000L & l) == 0L)
                        break;
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates (5, 6);
                     break;
                  case 0 :
                     if ((0xffffffffafffffffL & l) != 0L) {
                        if (kind > 31)
                           kind = 31;
                        jjCheckNAddTwoStates (5, 6);
                     } else if (curChar == 92)
                        jjAddStates (5, 8);
                     break;
                  case 24 :
                     if ((0xffffffffafffffffL & l) != 0L) {
                        if (kind > 31)
                           kind = 31;
                        jjCheckNAddTwoStates (5, 6);
                     } else if (curChar == 92)
                        jjAddStates (5, 8);
                     break;
                  case 2 :
                     if ((0x2000000020L & l) != 0L)
                        jjAddStates (9, 10);
                     break;
                  case 5 :
                     if ((0xffffffffafffffffL & l) == 0L)
                        break;
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates (5, 6);
                     break;
                  case 6 :
                     if (curChar == 92)
                        jjAddStates (5, 8);
                     break;
                  case 17 :
                     if ((0x2000000020L & l) != 0L)
                        jjAddStates (11, 12);
                     break;
                  case 21 :
                     if ((0x2000000020L & l) != 0L)
                        jjAddStates (13, 14);
                     break;
                  default :
                     break;
               }
            } while (i != startsAt);
         } else {
            int hiByte = (int) (curChar >> 8);
            int i1 = hiByte >> 6;
            long l1 = 1L << (hiByte & 077);
            int i2 = (curChar & 0xff) >> 6;
            long l2 = 1L << (curChar & 077);
MatchLoop:
            do {
               switch (jjstateSet [--i]) {
                  case 0 :
                  case 5 :
                     if (!jjCanMove_0 (hiByte, i1, i2, l1, l2))
                        break;
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates (5, 6);
                     break;
                  case 24 :
                     if (!jjCanMove_0 (hiByte, i1, i2, l1, l2))
                        break;
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates (5, 6);
                     break;
                  default :
                     break;
               }
            } while (i != startsAt);
         }
         if (kind != 0x7fffffff) {
            jjmatchedKind = kind;
            jjmatchedPos = curPos;
            kind = 0x7fffffff;
         }
         ++curPos;
         if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
            return curPos;
         try {
            curChar = input_stream.readChar ();
         } catch (java.io.IOException e) {
            return curPos;
         }
      }
   }

   private final int jjMoveStringLiteralDfa0_0 () {
      switch (curChar) {
         case 33 :
            return jjMoveStringLiteralDfa1_0 (0x8000L);
         case 40 :
            return jjStopAtPos (0, 35);
         case 41 :
            return jjStopAtPos (0, 36);
         case 42 :
            return jjStopAtPos (0, 22);
         case 43 :
            return jjStopAtPos (0, 20);
         case 44 :
            return jjStopAtPos (0, 37);
         case 45 :
            return jjStopAtPos (0, 21);
         case 47 :
            return jjStopAtPos (0, 23);
         case 60 :
            jjmatchedKind = 11;
            jjmatchedPos = 0;
            return jjMoveStringLiteralDfa1_0 (0x2000L);
         case 61 :
            return jjStopAtPos (0, 12);
         case 62 :
            jjmatchedKind = 10;
            jjmatchedPos = 0;
            return jjMoveStringLiteralDfa1_0 (0x4000L);
         case 65 :
            return jjMoveStringLiteralDfa1_0 (0x10000L);
         case 78 :
            return jjMoveStringLiteralDfa1_0 (0x80000L);
         case 79 :
            return jjMoveStringLiteralDfa1_0 (0x20000L);
         case 88 :
            return jjMoveStringLiteralDfa1_0 (0x40000L);
         case 92 :
            return jjStartNfaWithStates_0 (0, 9, 7);
         case 94 :
            return jjStopAtPos (0, 24);
         case 101 :
            return jjMoveStringLiteralDfa1_0 (0xc000000L);
         case 102 :
            return jjMoveStringLiteralDfa1_0 (0x40000000L);
         case 105 :
            return jjMoveStringLiteralDfa1_0 (0x2000000L);
         case 116 :
            return jjMoveStringLiteralDfa1_0 (0x30000000L);
         default :
            return jjMoveNfa_0 (0, 0);
      }
   }

   private final int jjMoveStringLiteralDfa1_0 (long active0) {
      try {
         curChar = input_stream.readChar ();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0 (0, active0);
         return 1;
      }
      switch (curChar) {
         case 61 :
            if ((active0 & 0x2000L) != 0L)
               return jjStopAtPos (1, 13);
            else if ((active0 & 0x4000L) != 0L)
               return jjStopAtPos (1, 14);
            else if ((active0 & 0x8000L) != 0L)
               return jjStopAtPos (1, 15);
            break;
         case 78 :
            return jjMoveStringLiteralDfa2_0 (active0, 0x10000L);
         case 79 :
            return jjMoveStringLiteralDfa2_0 (active0, 0xc0000L);
         case 82 :
            if ((active0 & 0x20000L) != 0L)
               return jjStartNfaWithStates_0 (1, 17, 24);
            break;
         case 97 :
            return jjMoveStringLiteralDfa2_0 (active0, 0x40000000L);
         case 102 :
            if ((active0 & 0x2000000L) != 0L)
               return jjStartNfaWithStates_0 (1, 25, 24);
            break;
         case 104 :
            return jjMoveStringLiteralDfa2_0 (active0, 0x10000000L);
         case 108 :
            return jjMoveStringLiteralDfa2_0 (active0, 0xc000000L);
         case 114 :
            return jjMoveStringLiteralDfa2_0 (active0, 0x20000000L);
         default :
            break;
      }
      return jjStartNfa_0 (0, active0);
   }

   private final int jjMoveStringLiteralDfa2_0 (long old0, long active0) {
      if ((active0 &= old0) == 0L)
         return jjStartNfa_0 (0, old0);
      try {
         curChar = input_stream.readChar ();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0 (1, active0);
         return 2;
      }
      switch (curChar) {
         case 68 :
            if ((active0 & 0x10000L) != 0L)
               return jjStartNfaWithStates_0 (2, 16, 24);
            break;
         case 82 :
            if ((active0 & 0x40000L) != 0L)
               return jjStartNfaWithStates_0 (2, 18, 24);
            break;
         case 84 :
            if ((active0 & 0x80000L) != 0L)
               return jjStartNfaWithStates_0 (2, 19, 24);
            break;
         case 101 :
            return jjMoveStringLiteralDfa3_0 (active0, 0x10000000L);
         case 108 :
            return jjMoveStringLiteralDfa3_0 (active0, 0x40000000L);
         case 115 :
            return jjMoveStringLiteralDfa3_0 (active0, 0xc000000L);
         case 117 :
            return jjMoveStringLiteralDfa3_0 (active0, 0x20000000L);
         default :
            break;
      }
      return jjStartNfa_0 (1, active0);
   }

   private final int jjMoveStringLiteralDfa3_0 (long old0, long active0) {
      if ((active0 &= old0) == 0L)
         return jjStartNfa_0 (1, old0);
      try {
         curChar = input_stream.readChar ();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0 (2, active0);
         return 3;
      }
      switch (curChar) {
         case 101 :
            if ((active0 & 0x8000000L) != 0L) {
               jjmatchedKind = 27;
               jjmatchedPos = 3;
            } else if ((active0 & 0x20000000L) != 0L)
               return jjStartNfaWithStates_0 (3, 29, 24);
            return jjMoveStringLiteralDfa4_0 (active0, 0x4000000L);
         case 110 :
            if ((active0 & 0x10000000L) != 0L)
               return jjStartNfaWithStates_0 (3, 28, 24);
            break;
         case 115 :
            return jjMoveStringLiteralDfa4_0 (active0, 0x40000000L);
         default :
            break;
      }
      return jjStartNfa_0 (2, active0);
   }

   private final int jjMoveStringLiteralDfa4_0 (long old0, long active0) {
      if ((active0 &= old0) == 0L)
         return jjStartNfa_0 (2, old0);
      try {
         curChar = input_stream.readChar ();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0 (3, active0);
         return 4;
      }
      switch (curChar) {
         case 101 :
            if ((active0 & 0x40000000L) != 0L)
               return jjStartNfaWithStates_0 (4, 30, 24);
            break;
         case 105 :
            return jjMoveStringLiteralDfa5_0 (active0, 0x4000000L);
         default :
            break;
      }
      return jjStartNfa_0 (3, active0);
   }

   private final int jjMoveStringLiteralDfa5_0 (long old0, long active0) {
      if ((active0 &= old0) == 0L)
         return jjStartNfa_0 (3, old0);
      try {
         curChar = input_stream.readChar ();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0 (4, active0);
         return 5;
      }
      switch (curChar) {
         case 102 :
            if ((active0 & 0x4000000L) != 0L)
               return jjStartNfaWithStates_0 (5, 26, 24);
            break;
         default :
            break;
      }
      return jjStartNfa_0 (4, active0);
   }

   private final int jjStartNfaWithStates_0 (int pos, int kind, int state) {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      try {
         curChar = input_stream.readChar ();
      } catch (java.io.IOException e) {
         return pos + 1;
      }
      return jjMoveNfa_0 (state, pos + 1);
   }

   private final int jjStartNfa_0 (int pos, long active0) {
      return jjMoveNfa_0 (jjStopStringLiteralDfa_0 (pos, active0), pos + 1);
   }

   private final int jjStopAtPos (int pos, int kind) {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      return pos + 1;
   }

   private final int jjStopStringLiteralDfa_0 (int pos, long active0) {
      switch (pos) {
         case 0 :
            if ((active0 & 0x200L) != 0L)
               return 7;
            if ((active0 & 0x7e0f8000L) != 0L) {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
               return 24;
            }
            return -1;
         case 1 :
            if ((active0 & 0x2020000L) != 0L)
               return 24;
            if ((active0 & 0x7c0d0000L) != 0L) {
               jjmatchedKind = 31;
               jjmatchedPos = 1;
               return 24;
            }
            return -1;
         case 2 :
            if ((active0 & 0xd0000L) != 0L)
               return 24;
            if ((active0 & 0x7c000000L) != 0L) {
               jjmatchedKind = 31;
               jjmatchedPos = 2;
               return 24;
            }
            return -1;
         case 3 :
            if ((active0 & 0x3c000000L) != 0L)
               return 24;
            if ((active0 & 0x40000000L) != 0L) {
               if (jjmatchedPos != 3) {
                  jjmatchedKind = 31;
                  jjmatchedPos = 3;
               }
               return 24;
            }
            return -1;
         case 4 :
            if ((active0 & 0x40000000L) != 0L)
               return 24;
            if ((active0 & 0x4000000L) != 0L) {
               jjmatchedKind = 31;
               jjmatchedPos = 4;
               return 24;
            }
            return -1;
         default :
            return -1;
      }
   }
}
